
i = 1
do while i < 11
    print i
    i += 1

i = 1
do until i = 10
    print 1
    i +=1

for i in 1..10
    print i

for i (10, i > 0, -1)
    print i


list1 = [1,2,3,4,5]
for item in list
    print item


fun factorial(n)
    if n = 1
        return 1
    else
        return n * factorial(n)


class parent
    fun init(x, y)
        do nothing

    fun method1(a,c)
        return a + c


class child(parent)
    fun init()
        do nothing

    fun child_method1()


p1 = parent()
print p1.method1(1,2)


s = 'asdfasdf'
print s.reverse
print s.find('f')




fun longest_word(sen)

    for i in (len(sen) - 1)
        if not sen[i].isalpha
            sen = sen[:i] + ' ' + sen[i+1:]

    words = sen.split(' ')

    i = -1
    maxlen = 0
    for word in words
        i += 1
        wordlen = len(word)
        if wordlen >  maxlen
            maxlen = wordlen
            maxi = i

    return words[maxi]


class HashTable
    hash_table = []
    bucket = []
    item = []

    fun init
        pass

    fun hash_func(key)
        bucket_size = 128
        hash_val = 0
        for each ch in key
            hash_val = (hash_val + ord(ch)) % bucket_size
        return hash_val

    fun additem(key, value)
        hv = hash_func(key)

        item.append(key)
        item.append(value)

        bucket.append(hv)
        bucket.append(self.item)

        hash_table.append(self.bucket)
